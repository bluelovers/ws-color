import type from './type';
import limit from './limit';
import clip_rgb from './clip_rgb';
import unpack from './unpack';
import last from './last';
export { clip_rgb, limit, type, unpack, last, };
export declare const PI: number;
export declare const TWOPI: number;
export declare const PITHIRD: number;
export declare const DEG2RAD: number;
export declare const RAD2DEG: number;
declare const _default: {
    clip_rgb: (rgb: import("..").IRGB) => import("..").IRGB;
    limit: typeof limit;
    type: typeof type;
    unpack: <K extends "hcg" | "hsi" | "cmyk" | "lab" | "rgb" | "rgba" | "hsl" | "hsla" | "hsv" | "lch" | "lrgb" | "hcl" | "gl">(args: any[], keyOrder?: K) => import("..").IColorSpaces[K];
    last: <T extends string>(args: any[] | [any, T] | [any, any, T] | [any, any, any, T] | [any, any, any, any, T]) => T;
    PI: number;
    TWOPI: number;
    PITHIRD: number;
    DEG2RAD: number;
    RAD2DEG: number;
};
export default _default;
